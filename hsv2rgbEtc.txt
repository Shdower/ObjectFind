/**/									//////////*about yellow square init*/////////
/**/const double SQUARE_YELLOW::h = 55.5;	const double SQUARE_YELLOW::s = 0.72595;	const double SQUARE_YELLOW::v = 0.53059;
/**/const double SQUARE_YELLOW::min_h = 20;	const double SQUARE_YELLOW::min_s = 0.1;	const double SQUARE_YELLOW::min_v = 0.1;
/**/const double SQUARE_YELLOW::max_h = 20;	const double SQUARE_YELLOW::max_s = 0.1;	const double SQUARE_YELLOW::max_v = 0.2;

#define CLIP(x) ( (x)>255 ? 255 : (x)<0 ? 0 : x)

void ImgProc::rgbToHsv(double R, double G, double B, double &h, double &s, double &v)
{
#if DEBUGTEST
	//cout << "in func rgbToHsv " << endl;
#endif
	double r, g, b;

	r = R;	g = G;	 b = B;

	r /= 255;
	g /= 255;
	b /= 255;
	if(DEBUG)
	{
		cout << " r : " << r << endl;
		cout << " g : " << g << endl;
		cout << " b : " << b << endl;
	}
	double max_rgb, min_rgb;

	max_rgb = max(r,g);
	max_rgb = max(max_rgb,b);
	min_rgb = min(r,g);
	min_rgb = min(min_rgb,b);

	v = max_rgb;   

	s = (max_rgb != 0.0) ? (max_rgb-min_rgb)/max_rgb : 0.0;

	if(s == 0.0)
		h = NULL;

	else                                      
	{
		double delta = max_rgb - min_rgb;  

		if(r == max_rgb)
			h = (g - b) / delta;

		else if( g == max_rgb)
			h = 2.0 + (b - r) / delta;  

		else if( b == max_rgb)
			h = 4.0 + (r - g) / delta; 

		h *= 60.0;

		if(h < 0.0)                    
			h += 360.0;
	}
	//cout << "h" << h << " s" << s << " v" << v << endl;
}
void ImgProc::hsvToRgb(double h, double s, double v, double &r, double &g, double &b)
{
	double f, p, q, t;
	int i;
	if(s==0.0)                     
	{
		if(h==0)             
			r = g = b = v;
		else
			r = g = b = 0;
	} 
	else 
	{                                
		if(h==360.0)
			h = 0.0;

		h /= 60.0;                     
		i = (int)h;                    
		f = h - i;                     
		p = v * (1.0 - s);
		q = v * (1.0 - (s * f));
		t = v * (1.0 - (s * (1.0 - f)));

		switch(i)
		{
		case 0: 
			r = v;	g = t; b = p; 
			break;
		case 1:
			r = q;	g = v; b = p;
			break;
		case 2:
			r = p;	g = v;	b = t; 
			break;
		case 3:
			r = p;	g = q; b = v;
			break;
		case 4: 
			r = t;	g = p; b = v;
			break;
		case 5:
			r = v;	g = p; b = q; 
			break;
		}
	}
}
void ImgProc::rgbToYuv(double r, double g, double b, double &y, double &u, double &v)	//rgb : [0:255] yuv[16,240]
{
	y =  (0.257*r) + (0.504*g) + (0.098*b) + 16;
	u = -(0.148*r) - (0.291*g) + (0.439*b) + 128;
	v =  (0.439*r) - (0.368*g) - (0.071*b) + 128;
}
void ImgProc::yuvToRgb(double y, double u, double v, double &r, double &g, double &b)
{
	r = 1.164*(y-16)				 + 1.596*(v-128);
	g = 1.164*(y-16) - 0.391*(u-128) - 0.813*(v-128);
	b = 1.164*(y-16) + 2.018*(u-128)				;
}
void ImgProc::rgbToYcbcr(double r, double g, double b, double &y, double &cb, double &cr)	//rgb[0:255] ycbcr[0:255]
{
	/*y  =  (256 * ( (0.299*r) + (0.587*g) + (0.114*b) + 0.5 ) / 256 );
	cb =  (256 * (-(0.169*r) - (0.331*g) + (0.500*b) + 0.5 ) / 256 ) + 128;
	cr =  (256 * ( (0.500*r) - (0.419*g) - (0.081*b) + 0.5 ) / 256 ) + 128;*/

	/*y  =  (256 * ( (0.299*r) + (0.587*g) + (0.114*b) + 0.5 ) >> 8 );
	cb =  (256 * (-(0.169*r) - (0.331*g) + (0.500*b) + 0.5 ) >> 8 ) + 128;
	cr =  (256 * ( (0.500*r) - (0.419*g) - (0.081*b) + 0.5 ) >> 8 ) + 128;*/

	/*y  =  (256 * ( (0.299*r) + (0.587*g) + (0.114*b) + 0.5 ) >> 8 );
	cb =  (256 * (-(0.169*r) - (0.331*g) + (0.500*b) + 0.5 ) >> 8 ) + 128;
	cr =  (256 * ( (0.500*r) - (0.419*g) - (0.081*b) + 0.5 ) >> 8 ) + 128;*/

	/*y  =  (( (77*r)  + (150*g) + (29*b)  + 128 ) >> 8 );
	cb =  ((-(43*r)  - (85*g)  + (128*b) + 128 ) >> 8 ) + 128;
	cr =  (( (128*r) - (107*g) - (21*b)  + 128 ) >> 8 ) + 128;

	y = CLIP(y);
	cb = CLIP(cb);
	cr = CLIP(cr);*/

	y  = CLIP( ((int)( (77*r)  + (150*g) + (29*b)  + 128 ) >> 8 )	   );
	cb = CLIP( ((int)(-(43*r)  - (85*g)  + (128*b) + 128 ) >> 8 ) + 128 );
	cr = CLIP( ((int)( (128*r) - (107*g) - (21*b)  + 128 ) >> 8 ) + 128 );
}
void ImgProc::ycbcrToRgb(double	y, double cb, double cr, double &r, double &g, double &b)
{
	r = y +					  1.4075*(cr-128);
	g = y - 0.3455*(cb-128) - 0.7169*(cr-128);
	b = y + 1.7790*(cb-128)					 ;
}